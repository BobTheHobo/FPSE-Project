// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Grid from "./Grid.res.mjs";
import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Placeholder from "./Placeholder.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as GameConfigForm from "./GameConfigForm.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var defaultOptions = {
  b: 3,
  s1: 2,
  s2: 3
};

var defaultPosition = {
  x: -1,
  y: -1
};

var defaultGameState_obstacles = [];

var defaultGameState = {
  obstacles: defaultGameState_obstacles,
  is_dead: true,
  player_position: defaultPosition
};

function decodeArrayFromJson(array) {
  var v = Js_json.decodeArray(array);
  if (v !== undefined) {
    return v;
  } else {
    return [];
  }
}

function decodeIntFromJson(json) {
  var v = Js_json.decodeNumber(json);
  if (v !== undefined) {
    return Js_math.floor_int(v);
  } else {
    return -1;
  }
}

function decodeCoordinateFromJson(coordinate) {
  var v = Js_json.decodeObject(coordinate);
  if (v === undefined) {
    return defaultPosition;
  }
  var xJson = v["x"];
  var yJson = v["y"];
  return {
          x: decodeIntFromJson(xJson),
          y: decodeIntFromJson(yJson)
        };
}

function decodeBooleanFromJson($$boolean) {
  var v = Js_json.decodeBoolean($$boolean);
  if (v !== undefined) {
    return v;
  } else {
    return false;
  }
}

function decodeResponseBody(payload) {
  var dict = Js_json.decodeObject(payload);
  if (dict !== undefined) {
    var is_dead = decodeBooleanFromJson(dict["is_dead"]);
    var player_position = decodeCoordinateFromJson(dict["player_position"]);
    var obstacles = (function (array) {
          return Js_array.map((function (json) {
                        var dict = Js_json.decodeObject(json);
                        if (dict === undefined) {
                          return {
                                  coordinate: defaultPosition,
                                  cell_types: []
                                };
                        }
                        var coordinate = decodeCoordinateFromJson(dict["coordinate"]);
                        var cell_types = (function (array) {
                              return Js_array.map((function (cellType) {
                                            var stringOption = Js_json.decodeString(cellType);
                                            return Core__Option.getExn(stringOption, undefined);
                                          }), array);
                            })(decodeArrayFromJson(dict["cell_types"]));
                        return {
                                coordinate: coordinate,
                                cell_types: cell_types
                              };
                      }), array);
        })(decodeArrayFromJson(dict["obstacles"]));
    return {
            obstacles: obstacles,
            is_dead: is_dead,
            player_position: player_position
          };
  } else {
    return defaultGameState;
  }
}

function App(props) {
  var match = React.useState(function () {
        return defaultOptions;
      });
  var fireParams = match[0];
  var match$1 = React.useState(function () {
        return defaultOptions;
      });
  var iceParams = match$1[0];
  var match$2 = React.useState(function () {
        return defaultOptions;
      });
  var waterParams = match$2[0];
  var match$3 = React.useState(function () {
        return defaultGameState;
      });
  var setGameState = match$3[1];
  var gameState = match$3[0];
  var isGameReady = gameState.obstacles.length > 0;
  var onPlayerMove = function (playerPosition) {
    var fetchCall = async function () {
      var response = await fetch("http://localhost:8080/game", {
            method: "POST",
            body: Caml_option.some(Core__Option.getExn(JSON.stringify({
                          player_position: playerPosition
                        }), undefined)),
            headers: Caml_option.some(new Headers({
                      "Content-Type": "application/json"
                    })),
            credentials: "include"
          });
      var payload = await response.json();
      var decoded = decodeResponseBody(payload);
      return setGameState(function (param) {
                  return decoded;
                });
    };
    fetchCall();
  };
  var startGame = function () {
    var fetchCall = async function () {
      var response = await fetch("http://localhost:8080/game/new", {
            method: "POST",
            body: Caml_option.some(Belt_Option.getExn(JSON.stringify({
                          fire: fireParams,
                          ice: iceParams,
                          water: waterParams,
                          width: 15,
                          height: 15
                        }))),
            headers: Caml_option.some(new Headers({
                      "Content-Type": "application/json"
                    })),
            credentials: "include"
          });
      var payload = await response.json();
      var decoded = decodeResponseBody(payload);
      setGameState(function (param) {
            return decoded;
          });
      console.log(decoded);
    };
    fetchCall();
  };
  var grid = isGameReady ? JsxRuntime.jsx(Grid.make, {
          gameState: gameState,
          onPlayerMove: onPlayerMove
        }) : JsxRuntime.jsx(Placeholder.make, {});
  return JsxRuntime.jsxs("main", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h1", {
                                      children: "Can you beat the Game of Life?",
                                      className: "text-white text-xl"
                                    }),
                                JsxRuntime.jsx("h3", {
                                      children: "You: 0",
                                      className: "text-white"
                                    }),
                                JsxRuntime.jsx("h3", {
                                      children: "Computer: 0",
                                      className: "text-white"
                                    })
                              ],
                              className: "flex flex-col gap-1 border-b border-gray-400 px-2"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(GameConfigForm.make, {
                                      value: fireParams,
                                      onValueChange: match[1],
                                      cellType: "Fire"
                                    }),
                                JsxRuntime.jsx(GameConfigForm.make, {
                                      value: iceParams,
                                      onValueChange: match$1[1],
                                      cellType: "Ice"
                                    }),
                                JsxRuntime.jsx(GameConfigForm.make, {
                                      value: waterParams,
                                      onValueChange: match$2[1],
                                      cellType: "Water"
                                    }),
                                JsxRuntime.jsx("button", {
                                      children: "Begin game",
                                      className: "mt-4 border border-gray-600 rounded-md h-12 px-4 text-white bg-blue-700",
                                      onClick: (function (param) {
                                          startGame();
                                        })
                                    })
                              ],
                              className: "p-4"
                            })
                      ],
                      className: "col-span-2 border-r border-gray-400 p-2"
                    }),
                JsxRuntime.jsx("div", {
                      children: grid,
                      className: "col-span-5 flex justify-center mt-16"
                    })
              ],
              className: "bg-gray-900 grid grid-cols-7 min-h-svh"
            });
}

var make = App;

export {
  make ,
}
/* Grid Not a pure module */
