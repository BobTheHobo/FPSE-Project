// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as JsxRuntime from "react/jsx-runtime";

function getColorClass(state) {
  switch (state) {
    case 0 :
        return "traversable";
    case 1 :
        return "goal";
    case 2 :
        return "player";
    case 3 :
        return "fire";
    case 4 :
        return "ice";
    default:
      return "default";
  }
}

function encode_request_body(game_id, player_position) {
  return Belt_Option.getExn(JSON.stringify({
                  game_id: game_id,
                  player_position: player_position
                }));
}

function decode_response_body(payload) {
  var response_body = Js_json.decodeObject(payload);
  if (response_body !== undefined) {
    return response_body;
  } else {
    return {};
  }
}

function number_to_int(number) {
  var a = Js_json.decodeNumber(number);
  if (a !== undefined) {
    return a | 0;
  } else {
    return -1;
  }
}

function Grid(props) {
  var match = React.useState(function () {
        return [
                0,
                0
              ];
      });
  var setPosition = match[1];
  var position = match[0];
  var match$1 = React.useState(function () {
        return {
                x: 0,
                y: 0
              };
      });
  var playerPos = match$1[0];
  var match$2 = React.useState(function () {
        return [];
      });
  var match$3 = React.useState(function () {
        return [];
      });
  var match$4 = React.useState(function () {
        return true;
      });
  var setIsValidMove = match$4[1];
  var isValidMove = match$4[0];
  var match$5 = React.useState(function () {
        return -1;
      });
  var setGameId = match$5[1];
  var gameId = match$5[0];
  var maxX = 9;
  var maxY = 9;
  var grid = Belt_Array.map(Belt_Array.make(10, undefined), (function () {
          return Belt_Array.make(10, 0);
        }));
  var fetchObstacles = function () {
    if (!isValidMove) {
      return ;
    }
    console.log("HEREEEEE");
    var gameCall = async function () {
      var response = await fetch("http://localhost:8080/game", {
            method: "POST",
            body: Caml_option.some(encode_request_body(gameId, playerPos)),
            headers: Caml_option.some(new Headers({
                      "Content-Type": "application/json"
                    }))
          });
      var payload = await response.json();
      var decoded = decode_response_body(payload);
      var gameIdNum = decoded["game_id"];
      var asInt = number_to_int(gameIdNum);
      console.log("GOT");
      console.log(asInt);
      return setGameId(function (param) {
                  return asInt;
                });
    };
    gameCall();
  };
  var onKeyDown = function (evt) {
    var key = evt.key;
    console.log(position);
    switch (key) {
      case "ArrowDown" :
          setPosition(function (param) {
                var y = param[1];
                var x = param[0];
                if ((x + 1 | 0) <= maxX) {
                  setIsValidMove(function (param) {
                        return true;
                      });
                  return [
                          Math.min(x + 1 | 0, maxX),
                          y
                        ];
                } else {
                  setIsValidMove(function (param) {
                        return false;
                      });
                  return [
                          x,
                          y
                        ];
                }
              });
          evt.preventDefault();
          return ;
      case "ArrowLeft" :
          setPosition(function (param) {
                var y = param[1];
                var x = param[0];
                if ((y - 1 | 0) >= 0) {
                  setIsValidMove(function (param) {
                        return true;
                      });
                  return [
                          x,
                          Math.max(y - 1 | 0, 0)
                        ];
                } else {
                  setIsValidMove(function (param) {
                        return false;
                      });
                  return [
                          x,
                          y
                        ];
                }
              });
          evt.preventDefault();
          return ;
      case "ArrowRight" :
          setPosition(function (param) {
                var y = param[1];
                var x = param[0];
                if ((y + 1 | 0) <= maxY) {
                  setIsValidMove(function (param) {
                        return true;
                      });
                  return [
                          x,
                          Math.min(y + 1 | 0, maxY)
                        ];
                } else {
                  setIsValidMove(function (param) {
                        return false;
                      });
                  return [
                          x,
                          y
                        ];
                }
              });
          evt.preventDefault();
          return ;
      case "ArrowUp" :
          setPosition(function (param) {
                var y = param[1];
                var x = param[0];
                if ((x - 1 | 0) >= 0) {
                  setIsValidMove(function (param) {
                        return true;
                      });
                  return [
                          Math.max(x - 1 | 0, 0),
                          y
                        ];
                } else {
                  setIsValidMove(function (param) {
                        return false;
                      });
                  return [
                          x,
                          y
                        ];
                }
              });
          evt.preventDefault();
          return ;
      default:
        return ;
    }
  };
  React.useEffect((function () {
          fetchObstacles();
        }), [position]);
  React.useEffect((function () {
          document.addEventListener("keyup", onKeyDown);
          return (function () {
                    document.removeEventListener("keyup", onKeyDown);
                  });
        }), []);
  Belt_Array.setExn(Belt_Array.getExn(grid, maxX), maxY, 1);
  Belt_Array.setExn(Belt_Array.getExn(grid, position[0]), position[1], 2);
  Belt_Array.forEach(match$2[0], (function (pos) {
          Belt_Array.setExn(Belt_Array.getExn(grid, pos[0]), pos[1], 3);
        }));
  Belt_Array.forEach(match$3[0], (function (pos) {
          Belt_Array.setExn(Belt_Array.getExn(grid, pos[0]), pos[1], 4);
        }));
  return JsxRuntime.jsx("div", {
              children: grid.map(function (row, y) {
                    return JsxRuntime.jsx("div", {
                                children: row.map(function (state, x) {
                                      return JsxRuntime.jsx("div", {
                                                  className: "cell " + getColorClass(state)
                                                }, String(x));
                                    }),
                                className: "row"
                              }, String(y));
                  }),
              className: "grid"
            });
}

var make = Grid;

export {
  make ,
}
/* react Not a pure module */
